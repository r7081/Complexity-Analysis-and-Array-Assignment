Q1: Take m and n input from the user and m * n integer inputs from user and print the following:  number of positive numbers 
number of negative numbers
 number of odd numbers 
number of even numbers
 number of 0. 
INPUT : 
1 2 -3 4
0 0 -4 2
1 -1 2 3
-4 -5 -7 0
number of positive numbers = 7 
number of negative numbers = 6 
number of odd numbers = 7 
number of even numbers = 9 
number of 0 = 3 
Solution : 
import java.io.*;
import java.util.*;
public class Main{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows=");
    m=sc.nextInt();    
    System.out.print("enter the number of column=");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element=\n");    
    for(i=0;i<m;i++){    
        for(j=0;j<n;j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }     
    int positive = 0 , negative = 0 , zero = 0 , odd = 0 , even = 0;
        for( i = 0 ; i < m  ; i++){
            for( j = 0 ; j < n  ; j++){
                if(arr[i][j] > 0)positive++;
                if(arr[i][j] < 0)negative++;
                if(arr[i][j] == 0)zero++;
                if((arr[i][j] % 2) == 0)even++;
                if((arr[i][j] % 2) != 0)odd++;
            }
        }
        
        System.out.println("Number of positives = " + positive);
        System.out.println("Number of negatives = " + negative);
        System.out.println("Number of odds = " + odd);
        System.out.println("Number of evens = " + even);
        System.out.println("Number of zeroes = " + zero);
    }     
}
OUTPUT:
Enter number of rows:4
Enter number of columns :3
Enter matrix element : 
-2 0 9
0 0 8
-1 -2 -9
1 1 8
Number of positives =5
Number of negatives=4
Number of odds =5
Number of evens=7
Number of zeros=3
Approach:
 In this question we have simply taken the 2D matrix as input from the user and traversed the matrix and checked for every element whether it is positive, negative, zero, odd or even.
We have used if conditions and not if-else because one element of the matrix can play multiple roles. It can be even as well as positive and there are similar other possibilities as well.
Time complexity: O(n*m) where n = number of rows , m = number of columns   Space complexity: O(1)


Q2: write a program to print the elements above the secondary diagonal in a user inputted   square matrix.
OUTPUT:
1  2  4
Solutions:
import java.io.*;
import java.util.*;
public class Main{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows : ");
    m=sc.nextInt();    
    System.out.print("enter the number of column : ");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }     
    
    System.out.println("Elements above secondary diagonal are as follows : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            if(i + j < m - 1)System.out.print(arr[i][j] + "  ");
            }    
        }  
    }     
}
OUTPUT:
Enter number of rows:3
Enter number of columns :3
Enter matrix element : 
1  2  3
4  5  6
7  8  9
Elements over secondary diagonal are as follows :
1  2  4
Approach:
 The secondary diagonal is highlighted. The elements that lie above the secondary diagonal are also highlighted. In all these blue cells one thing is common. The sum of (i + j)th coordinate is always lesser than the column number - 1. 0 + 0 < 3 , 0 + 1 < 3 , 0 + 2 < 3 , 1 + 0 < 3 and so on. We have used this condition to print all those elements. 
Time complexity: O(n*n) where n = number of row
 Space complexity: O(1) 


Q3: write a program to print the elements of both the diagonals in a user inputted square   matrix in any order.
OUTPUT:
1  3  5  7  
import java.io.*;
import java.util.*;
public class Main{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows : ");
    m=sc.nextInt();    
    System.out.print("enter the number of column : ");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }     
    
    System.out.println("Elements of both the diagonals are as follows : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            if(i + j  == m - 1)System.out.print(arr[i][j] + "  ");
            else if(i == j)System.out.print(arr[i][j] + "  ");
            }    
        }  
    }     
}
OUTPUT : 
Enter number of rows:5
Enter number of columns :5
Enter matrix element : 
1 2 3 4 5
3 4 5 6 7
5 6 7 8 9
0 1 4 2 3 
9 7 6 5 8
Elements of both diagonals are as follows : 
1 5 4 6 7 1 2 9 8
Approach:
 For primary diagonal as highlighted by blue color we can observe the similarities in the coordinate that th8 ith coordinate is always equal to the jth coordinate.JI For the secondary diagonal as highlighted by red color we can observe the similarities in the coordinate that the sum of (i + j)th coordinate is always equal to 1 less in the number of columns i.e m - 1.[It can be also treated as nK1 because the matrix is square matrix].
For an odd matrix we can see one thing that the middle element (highlightedKby blue and red colors) is also an element of primary as well as secondary diagonal but it needs to be printed just once. For that we have used theKif-else condition so that either the primary diagonal condition meets or the secondary diagonal condition and not both simultaneously.   Time complexity: O(n*n) where n = number of rows Space complexity: O(1)   Optimised Approach. As we have a square matrix, and we know this special property of Diagonal element, then for one diagonal both indices are the same and for the other the sum of both indices = m-1.   So we will optimize our solution by just traversing one time and getting both the values together.   To skip the middle element twice we will add an check extra i.e. i != m-1-i.
This condition will ensure that for the middle element as we are already printing by i,then we shouldn’t print by i != m-1-i   
Time complexity: O(n)
 where n = number of rows 
Space complexity: O(1) 
import java.io.*;
import java.util.*;
public class Test{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows : ");
    m=sc.nextInt();    
    System.out.print("enter the number of column : ");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }     
    
    System.out.println("Elements of both the diagonals are as follows : ");    


    // As we have a square matrix, and we know this special property of Diagonal element, then for one diagonal both indices are the same and for the other the sum of both = m-1. 
    // So we will optimize our solution by just traversing one time and getting both the values. To skip middle element twice we will add an check extra i.e. i!= m-1-i
    for(i = 0 ; i < m ; i++){        
        System.out.print(arr[i][i] + "  ");


        if(i != m-1-i)
            System.out.print(arr[i][m-1-i] + "  ");
        }    
    }  
      
}


Q4: Write a java program to find the largest element of a given 2D array of integers.  
INPUT : 
1 2 4 0
2 5 7 -1
4 2 6 9
OUTPUT : 9
SOLUTION : 
import java.io.*;
import java.util.*;
public class Main{ 
  public static void main(String args[]){
    
    int m,n;
    Scanner sc=new Scanner(System.in);
    System.out.print("enter the number of rows : ");
    m=sc.nextInt();    
    System.out.print("enter the number of column : ");    
    n=sc.nextInt();
    int arr[][]=new int[m][n];
    
    int i,j;    
       
    System.out.println("enter the  matrix element : ");    
    for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            arr[i][j]=sc.nextInt();  
        }    
    }  
    
    int maximum = -100000008;
     for(i = 0 ; i < m ; i++){    
        for(j = 0 ; j < n ; j++){    
            if(maximum < arr[i][j])maximum = arr[i][j];  
        }    
    }
    
    System.out.println("The maximum element in this matrix is : " + maximum);
    }     
}
OUTPUT:
 Enter number of rows:3
Enter number of columns :4
Enter matrix element : 
1 3 6 9
0 9 8 2
7 0 6 -1
The maximum element in the matrix is : 9
Approach: We have simply traversed the matrix and updated the “maximum” if any other element is greater than the currently set “maximum”.
 Time complexity: O(m*n) 
where m = number of rows and
 n = number of columns 
Space complexity: O(1) 




Q5: Write a function which accepts a 2D array of integers and its size as arguments and   displays the elements of middle row and the elements of middle column. Printing can be done in   any order. [Assuming the 2D Array to be a square matrix with odd dimensions i.e. 3x3, 5x5, 7x7 etc...]
INPUT:
1 2 3 4 5
3 4 5 6 7
7 6 5 4 3
8 7 6 5 4
1 2 37 8 0
Output : 3 5 5 6 37 76 4 3 
SOLUTION : 
import java.io.*;
import java.util.*;
public class Main{ 
    public static void main(String args[]){
    
        int m,n;
        Scanner sc=new Scanner(System.in);
        System.out.print("enter the number of rows : ");
        m=sc.nextInt();    
        
        int arr[][]=new int[m][m];
        
        int i,j;    
           
        System.out.println("enter the  matrix element : ");    
        for(i = 0 ; i < m ; i++){    
            for(j = 0 ; j < m ; j++){    
                arr[i][j]=sc.nextInt();  
            }    
        }  
        
        System.out.println("The elements  of the middle row and middle column are as follows : ");
        
         for(i = 0 ; i < m ; i++)System.out.print(arr[i][m/2] + "  ");    
         for(j = 0 ; j < m ; j++){
            if(j == m/2)continue;
            System.out.print(arr[m/2][j] + "  ");
        }
    }     
}
 Enter number of rows:
3
Enter matrix element : 
1  2  3
4  5  6
7  8  9
The elements of the middle row & middle column are as follows : 
2 5 8 4 6